@{
    var imageFiles = System.IO.Directory.GetFiles("wwwroot/images", "*.txt");
}

<div class="gallery-wrapper">
    <header class="gallery-header">
        <h1 class="gallery-title">GALLERY</h1>
        <div class="gallery-stats">
            <span class="item-count">@imageFiles.Length Images</span>
        </div>
    </header>

    <div class="gallery-container">
        <div class="masonry-grid" id="masonry-grid">
            @foreach (var imgFile in imageFiles)
            {
                var imageUrl = System.IO.File.ReadAllText(imgFile).Trim();
                var fileName = System.IO.Path.GetFileNameWithoutExtension(imgFile);
                var fileIndex = Array.IndexOf(imageFiles, imgFile);

                <div class="masonry-item" data-index="@fileIndex">
                    <div class="artwork-card">
                        <div class="image-container">
                            <img src="@imageUrl"
                                 alt="@fileName"
                                 class="gallery-image"
                                 loading="lazy"
                                 onerror="this.parentElement.parentElement.style.display='none'" />

                            <!-- Overlay with actions -->
                            <div class="image-overlay">
                                <div class="overlay-actions">
                                    <button class="action-btn favorite-btn" onclick="toggleFavorite(this, '@fileName')" title="Add to favorites">
                                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
                                        </svg>
                                    </button>
                                    <button class="action-btn share-btn" onclick="shareImage('@imageUrl', '@fileName')" title="Share image">
                                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"></path>
                                            <polyline points="16,6 12,2 8,6"></polyline>
                                            <line x1="12" y1="2" x2="12" y2="15"></line>
                                        </svg>
                                    </button>
                                    <button class="action-btn fullscreen-btn" onclick="openFullscreen('@imageUrl', '@fileName')" title="View fullscreen">
                                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <polyline points="15,3 21,3 21,9"></polyline>
                                            <polyline points="9,21 3,21 3,15"></polyline>
                                            <line x1="21" y1="3" x2="14" y2="10"></line>
                                            <line x1="3" y1="21" x2="10" y2="14"></line>
                                        </svg>
                                    </button>
                                </div>
                            </div>

                            <!-- Loading indicator -->
                            <div class="loading-indicator">
                                <div class="spinner"></div>
                            </div>
                        </div>

                        <!-- Image info -->
                        <div class="image-info">
                            <h3 class="image-title">@fileName</h3>
                            <div class="image-meta">
                                <span class="image-number">#@(fileIndex + 1)</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Fullscreen Modal -->
    <div id="fullscreen-modal" class="fullscreen-modal">
        <div class="modal-content">
            <button class="close-btn" onclick="closeFullscreen()">&times;</button>
            <div class="image-wrapper">
                <img id="fullscreen-image" src="" alt="">
            </div>
            <div class="modal-info">
                <h3 id="modal-title"></h3>
                <div class="modal-actions">
                    <button class="modal-btn" onclick="downloadImage()">Download</button>
                    <button class="modal-btn" onclick="shareFromModal()">Share</button>
                </div>
            </div>
        </div>
        <div class="modal-overlay" onclick="closeFullscreen()"></div>
    </div>
</div>

<style>
    * {
        box-sizing: border-box;
    }

    body {
        margin: 0;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        background: #f8f9fa;
    }

    .gallery-wrapper {
        min-height: 100vh;
    }

    .gallery-header {
        text-align: center;
        padding: 40px 20px 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        margin-bottom: 30px;
    }

    .gallery-title {
        font-size: 3.5rem;
        font-weight: 700;
        margin: 0 0 10px 0;
        letter-spacing: -1px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    }

    .gallery-stats {
        font-size: 1.1rem;
        opacity: 0.9;
    }

    .item-count {
        background: rgba(255,255,255,0.2);
        padding: 8px 16px;
        border-radius: 20px;
        backdrop-filter: blur(10px);
    }

    .gallery-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 20px 40px;
    }

    .masonry-grid {
        column-count: 4;
        column-gap: 24px;
        column-fill: balance;
    }

    .masonry-item {
        display: inline-block;
        width: 100%;
        margin-bottom: 24px;
        break-inside: avoid;
        opacity: 0;
        transform: translateY(20px);
        animation: fadeInUp 0.6s ease forwards;
    }

    @@keyframes fadeInUp {
        to

    {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .artwork-card {
        background: white;
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 8px 32px rgba(0,0,0,0.12);
        transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
        cursor: pointer;
    }

        .artwork-card:hover {
            transform: translateY(-8px) scale(1.02);
            box-shadow: 0 16px 48px rgba(0,0,0,0.18);
        }

    .image-container {
        position: relative;
        overflow: hidden;
    }

    .gallery-image {
        width: 100%;
        height: auto;
        display: block;
        transition: transform 0.6s cubic-bezier(0.25, 0.8, 0.25, 1);
    }

    .artwork-card:hover .gallery-image {
        transform: scale(1.08);
    }

    .image-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(to bottom, transparent 0%, rgba(0,0,0,0.6) 100%);
        opacity: 0;
        transition: all 0.3s ease;
        display: flex;
        align-items: flex-end;
        justify-content: center;
        padding: 20px;
    }

    .artwork-card:hover .image-overlay {
        opacity: 1;
    }

    .overlay-actions {
        display: flex;
        gap: 12px;
        transform: translateY(20px);
        transition: transform 0.3s ease 0.1s;
    }

    .artwork-card:hover .overlay-actions {
        transform: translateY(0);
    }

    .action-btn {
        width: 44px;
        height: 44px;
        border-radius: 50%;
        border: none;
        background: rgba(255,255,255,0.95);
        backdrop-filter: blur(20px);
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        color: #333;
    }

        .action-btn:hover {
            background: white;
            transform: scale(1.1);
            box-shadow: 0 4px 16px rgba(0,0,0,0.2);
        }

    .favorite-btn:hover {
        color: #e74c3c;
    }

    .favorite-btn.favorited {
        color: #e74c3c;
        background: #ffe6e6;
    }

    .share-btn:hover {
        color: #3498db;
    }

    .fullscreen-btn:hover {
        color: #9b59b6;
    }

    .loading-indicator {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        opacity: 1;
        transition: opacity 0.3s ease;
    }

    .gallery-image.loaded + .image-overlay + .loading-indicator,
    .gallery-image.error + .image-overlay + .loading-indicator {
        opacity: 0;
        pointer-events: none;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 3px solid #f3f3f3;
        border-top: 3px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    .image-info {
        padding: 16px 20px;
    }

    .image-title {
        font-size: 1rem;
        font-weight: 600;
        margin: 0 0 8px 0;
        color: #333;
        line-height: 1.4;
    }

    .image-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.85rem;
        color: #666;
    }

    .image-number {
        background: #f0f2f5;
        padding: 4px 8px;
        border-radius: 12px;
        font-weight: 500;
    }

    /* Fullscreen Modal - Fixed positioning */
    .fullscreen-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        z-index: 1000;
    }

        .fullscreen-modal.active {
            display: block;
        }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0,0,0,0.9);
        backdrop-filter: blur(20px);
    }

    .modal-content {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 90vw;
        height: 90vh;
        z-index: 1001;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .image-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        flex: 1;
        max-height: calc(90vh - 100px); /* Account for modal info */
    }

    .close-btn {
        position: absolute;
        top: -50px;
        right: 0;
        background: none;
        border: none;
        color: white;
        font-size: 2rem;
        cursor: pointer;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: background 0.2s ease;
        z-index: 1002;
    }

        .close-btn:hover {
            background: rgba(255,255,255,0.1);
        }

    #fullscreen-image {
        max-width: 100%;
        max-height: 100%;
        width: auto;
        height: auto;
        object-fit: contain;
        border-radius: 8px;
        box-shadow: 0 20px 60px rgba(0,0,0,0.3);
    }

    .modal-info {
        text-align: center;
        margin-top: 20px;
        flex-shrink: 0;
    }

    #modal-title {
        color: white;
        margin: 0 0 15px 0;
        font-size: 1.2rem;
    }

    .modal-actions {
        display: flex;
        gap: 12px;
        justify-content: center;
    }

    .modal-btn {
        background: rgba(255,255,255,0.1);
        border: 1px solid rgba(255,255,255,0.2);
        color: white;
        padding: 10px 20px;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
        backdrop-filter: blur(10px);
    }

        .modal-btn:hover {
            background: rgba(255,255,255,0.2);
            transform: translateY(-2px);
        }

    /* Responsive Design */
    @@media (max-width: 1200px) {
        .masonry-grid

    {
        column-count: 3;
        column-gap: 20px;
    }

    }

    @@media (max-width: 768px) {
        .masonry-grid

    {
        column-count: 2;
        column-gap: 16px;
    }

    .gallery-header {
        padding: 30px 15px 15px;
    }

    .gallery-title {
        font-size: 2.5rem;
    }

    .gallery-container {
        padding: 0 15px 30px;
    }

    .masonry-item {
        margin-bottom: 16px;
    }

    .modal-content {
        width: 95vw;
        height: 95vh;
    }

    }

    @@media (max-width: 480px) {
        .masonry-grid

    {
        column-count: 1;
        column-gap: 0;
    }

    .gallery-title {
        font-size: 2rem;
    }

    .overlay-actions {
        gap: 8px;
    }

    .action-btn {
        width: 40px;
        height: 40px;
    }

    }

    /* Animation delays for staggered load effect */
    .masonry-item:nth-child(1) {
        animation-delay: 0.1s;
    }

    .masonry-item:nth-child(2) {
        animation-delay: 0.15s;
    }

    .masonry-item:nth-child(3) {
        animation-delay: 0.2s;
    }

    .masonry-item:nth-child(4) {
        animation-delay: 0.25s;
    }

    .masonry-item:nth-child(n+5) {
        animation-delay: 0.3s;
    }
</style>

<script>
    // Image loading handler
    document.addEventListener('DOMContentLoaded', function() {
        const images = document.querySelectorAll('.gallery-image');

        images.forEach(img => {
            img.addEventListener('load', function() {
                this.classList.add('loaded');
            });

            img.addEventListener('error', function() {
                this.classList.add('error');
                console.log('Failed to load image:', this.src);
            });

            // If image is already cached and loaded
            if (img.complete) {
                img.classList.add('loaded');
            }
        });
    });

    // Favorites functionality (uses in-memory storage)
    let galleryFavorites = [];

    function toggleFavorite(button, fileName) {
        const isFavorited = galleryFavorites.includes(fileName);

        if (isFavorited) {
            const index = galleryFavorites.indexOf(fileName);
            galleryFavorites.splice(index, 1);
            button.classList.remove('favorited');
        } else {
            galleryFavorites.push(fileName);
            button.classList.add('favorited');
        }

        // Visual feedback
        button.style.transform = 'scale(1.3)';
        setTimeout(() => {
            button.style.transform = '';
        }, 200);
    }

    // Load favorites on page load
    function loadFavorites() {
        document.querySelectorAll('.favorite-btn').forEach(btn => {
            const fileName = btn.getAttribute('onclick').match(/'([^']+)'/)[1];
            if (galleryFavorites.includes(fileName)) {
                btn.classList.add('favorited');
            }
        });
    }

    // Share functionality
    function shareImage(imageUrl, fileName) {
        if (navigator.share) {
            navigator.share({
                title: fileName,
                text: `Check out this image: ${fileName}`,
                url: imageUrl
            });
        } else {
            // Fallback: copy to clipboard
            navigator.clipboard.writeText(imageUrl).then(() => {
                showNotification('Image URL copied to clipboard!');
            });
        }
    }

    // Fullscreen functionality - Fixed centering
    let currentImageUrl = '';
    let currentImageTitle = '';

    function openFullscreen(imageUrl, fileName) {
        currentImageUrl = imageUrl;
        currentImageTitle = fileName;

        const modal = document.getElementById('fullscreen-modal');
        const img = document.getElementById('fullscreen-image');
        const title = document.getElementById('modal-title');

        img.src = imageUrl;
        title.textContent = fileName;
        modal.classList.add('active');

        // Prevent body scroll and ensure proper positioning
        document.body.style.overflow = 'hidden';
        document.body.style.position = 'fixed';
        document.body.style.top = `-${window.scrollY}px`;
        document.body.style.width = '100%';

        // Store scroll position for restoration
        modal.dataset.scrollY = window.scrollY.toString();
    }

    function closeFullscreen() {
        const modal = document.getElementById('fullscreen-modal');
        const scrollY = modal.dataset.scrollY;

        modal.classList.remove('active');

        // Restore body scroll
        document.body.style.position = '';
        document.body.style.top = '';
        document.body.style.width = '';
        document.body.style.overflow = '';

        // Restore scroll position
        if (scrollY) {
            window.scrollTo(0, parseInt(scrollY));
        }
    }

    function downloadImage() {
        const link = document.createElement('a');
        link.href = currentImageUrl;
        link.download = currentImageTitle || 'image';
        link.target = '_blank';
        link.click();
    }

    function shareFromModal() {
        shareImage(currentImageUrl, currentImageTitle);
    }

    // Notification system
    function showNotification(message) {
        const notification = document.createElement('div');
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #333;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 10000;
            animation: slideIn 0.3s ease;
        `;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    // Keyboard navigation for fullscreen
    document.addEventListener('keydown', function(e) {
        if (document.getElementById('fullscreen-modal').classList.contains('active')) {
            if (e.key === 'Escape') {
                closeFullscreen();
            }
        }
    });

    // Initialize favorites on load
    document.addEventListener('DOMContentLoaded', loadFavorites);

    // Add slide-in animation keyframes
    const style = document.createElement('style');
    style.textContent = `
        @@keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
    `;
    document.head.appendChild(style);
</script>